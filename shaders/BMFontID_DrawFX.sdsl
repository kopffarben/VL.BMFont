shader BMFontID_DrawFX : VS_PS_Base, ColorBase, ShaderUtils, Texturing
{
    //compose BMFont_Provider Provider;

	stage StructuredBuffer<float3>			PositionBuffer;
	stage StructuredBuffer<int>				PositionBufferIndex;
	stage StructuredBuffer<bool>			enabledBuffer;
	stage StructuredBuffer<float2>			QuadSizeBuffer;

	stream uint VertexID : SV_VertexID;
	stream bool Enabled;
    stage stream float2 quadSize;
	stage stream float4 quadBGCol;

    static const float2 FontQuadUV[4] = {
        float2(0,0), 
        float2(1,0),
        float2(0,1),
        float2(1,1)
    };

	static const float3 FontQuadPositions[4] = {
        float3(-1, 1,0),
        float3( 1, 1,0),
        float3(-1, -1,0),
        float3( 1, -1,0),
    };

    override stage void VSMain()
    {
	   uint id = streams.VertexID;
	   streams.Enabled = enabledBuffer[PositionBufferIndex[id]];;
	   streams.PositionWS = float4(PositionBuffer[PositionBufferIndex[id]], 1);
	   streams.quadSize = QuadSizeBuffer[id];
	   streams.quadBGCol = float4( (float)id, (float)PositionBufferIndex[id], -1,-1);
       streams.ShadingPosition = streams.Position; // must be assigned to something
    }

    // custom geometry shader, quad particle in this case
	[maxvertexcount(4)]
	stage void GSMain(point Input input[1], inout TriangleStream<Output> triangleStream)
	{
		streams = input[0];

		if (streams.Enabled)
		{
			if (streams.quadSize.x > 0 || streams.quadSize.y > 0)
			{
				float4 posView = mul(streams.PositionWS, WorldView);
				for (int i=0; i<4; i++)
				{
					streams.TexCoord  = FontQuadUV[i].xy;
					float4 viewCornerPos = float4(posView.xyz + FontQuadPositions[i].xyz * float3(streams.quadSize,1), 1);
					streams.ShadingPosition = mul(viewCornerPos, Projection);

					triangleStream.Append(streams);
				}     
			}
		}
	}

    override stage void PSMain() 
    {
        streams.ColorTarget = streams.quadBGCol;
    }
};