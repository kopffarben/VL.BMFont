// source:
// https://github.com/mrvux/dx11-vvvv-girlpower/blob/master/nodes/texture11/Filter/TransformTexture.tfx

[Category("Filter")]
[Summary("")]
shader Typo_TextureFX : FilterBase, TextureUtils, CharPlacementStruct
{
    float4x4 Transform;

    SamplerState CustomSampler;

    [Color]
    float4 bgColor = float4(0.0f, 0.0f, 0.0f, 1.0f);

    [Color]
    float4 fgColor = float4(1.0f, 1.0f, 1.0f, 1.0f);

    float screenPxRange = 4;

    [Summary("Size of FontTexture")]
    int2 SrcSize = int2(512,512);

    [Summary("Target Texture Size")]
    int2 DesSize = int2(512,512);

    StructuredBuffer<CharPlacement> CharPlacementBuffer; 

    [Summary("")]
    int2 SrcCharPos = int2(0,0);

    [Summary("")]
    int2 SrcCharSize = int2(64,64);

    [Summary("")]
    int2 DesCharPos = int2(0,0);

    [Summary("")]
    int2 DesCharSize = int2(256,256);

    float4 Filter(float4 tex0col)
    {
        uint numChars, stride;
        CharPlacementBuffer.GetDimensions(numChars,stride); 

        float opacity = 0;
        for (uint i=0; i<numChars;i++)
		{
            float2 desCharSize = ((float2)DesSize/(float2)CharPlacementBuffer[i].DesSize);
            float2 desCharPos  = ((float2)CharPlacementBuffer[i].DesPos/(float2)CharPlacementBuffer[i].DesSize);
            float2 destUV = streams.TexCoord * desCharSize - desCharPos;
            if (destUV.x > 0 && destUV.x < 1 && destUV.y > 0 && destUV.y < 1 )
            {
                float2 srcCharSize = ((float2)CharPlacementBuffer[i].SrcSize/(float2)SrcSize);
                float2 srcCharPos  = ((float2)CharPlacementBuffer[i].SrcPos/(float2)SrcSize);
                float2 uv = destUV * srcCharSize + srcCharPos;
                float3 msd = Texture0.Sample(CustomSampler, uv).rgb;
                float  sd  = median(msd.r, msd.g, msd.b);
                float screenPxDistance = screenPxRange*(sd - 0.5);
                opacity += clamp(screenPxDistance + 0.5, 0.0, 1.0);
            }
        }
        
        return lerp(bgColor, fgColor, opacity);

    }

    float median(float r, float g, float b) 
    {
        return max(min(r, g), min(max(r, g), b));
    }
};