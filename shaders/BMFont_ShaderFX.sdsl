shader BMFont_ShaderFX : BMFont_Provider, FuseCommonBuffer, TransformationBase, VertexIDStream, CharPlacementStruct
{
	rgroup PerMaterial
	{
		stage StructuredBuffer<float3>			posBuffer;
		stage StructuredBuffer<int>				CharPosIndex;
		stage StructuredBuffer<CharPlacement>	CharPlacementBuffer;
		stage StructuredBuffer<int2>			CharStartEndBuffer;
		stage StructuredBuffer<int2>			CharTexSizeBuffer;
		stage StructuredBuffer<float4>			CharColorBuffer;

		stage Texture2D FontTexture;
		stage SamplerState FontSampler
		{
			Filter = MIN_MAG_MIP_LINEAR;
			AddressU = Border;
			AddressV = Border;
		};		
	}

	cbuffer PerMaterial
	{
		stage int	 LineHight = 380;
		stage int2   SrcSize = int2(512,512);
		stage float	 Size = 1.0;
		stage float  screenPxRange = 16;
	}

	// assign VertexID
	stage override void PreTransformPosition()
	{
		AssignVertexID();
	}

	override stage float3 getQuadPos()
	{
		return posBuffer[CharPosIndex[streams.VertexID]];
	}

	override stage float2 getQuadSize()
	{
		return float2(((float)CharTexSizeBuffer[streams.VertexID].x * Size)/(float)LineHight,((float)CharTexSizeBuffer[streams.VertexID].y * Size)/(float)LineHight);
	}

	override stage float4 getQuadColor()
    {
		return CharColorBuffer[streams.VertexID];
    }


	override stage float getCharOpacity(float2 uv)
	{
		float opacity = 0;
		for (uint i=(uint)CharStartEndBuffer[streams.VertexID].x; i<(uint)CharStartEndBuffer[streams.VertexID].y;i++)
		{
            float2 desCharSize = ((float2)CharTexSizeBuffer[streams.VertexID]/(float2)CharPlacementBuffer[i].DesSize);
            float2 desCharPos  = ((float2)CharPlacementBuffer[i].DesPos/(float2)CharPlacementBuffer[i].DesSize);
            float2 destUV = uv * desCharSize - desCharPos;
            if (destUV.x > 0 && destUV.x < 1 && destUV.y > 0 && destUV.y < 1 )
            {
                float2 srcCharSize = ((float2)CharPlacementBuffer[i].SrcSize/(float2)SrcSize);
                float2 srcCharPos  = ((float2)CharPlacementBuffer[i].SrcPos/(float2)SrcSize);
                float2 uv = destUV * srcCharSize + srcCharPos;
                float3 msd = FontTexture.SampleLevel(FontSampler, uv,0).rgb;
                float  sd  = median(msd.r, msd.g, msd.b);
                float screenPxDistance = screenPxRange*(sd - 0.5);
				opacity = max(opacity ,clamp(screenPxDistance + 0.5, 0.0, 1.0));

            }
        }
		return opacity;
	}

	float median(float r, float g, float b) 
    {
        return max(min(r, g), min(max(r, g), b));
    }
};
