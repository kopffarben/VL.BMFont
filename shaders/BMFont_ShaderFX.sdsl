shader BMFont_ShaderFX : BMFont_Provider, TransformationBase, VertexIDStream, CharPlacementStruct, BMFont, Transformation, ShaderUtils
{
	rgroup PerMaterial
	{
		stage StructuredBuffer<float3>			PositionBuffer;
		stage StructuredBuffer<bool>			enabledBuffer;
		stage StructuredBuffer<bool> 			selectedBuffer;

		stage StructuredBuffer<float4>			ColorBuffer;
		stage StructuredBuffer<float4>			BGColorBuffer;

		stage StructuredBuffer<CharPlacementUV>	CharPlacementUVBuffer;
		stage StructuredBuffer<int2>			CharStartEndBuffer;
		stage StructuredBuffer<float2>			QuadSizeBuffer;

		stage Texture2D FontTexture;				
	}

	cbuffer PerMaterial
	{
		[Color]
		stage float4 Color		= float4(1,1,1,1);

		stage bool   UseBG		= false;
		[Color]
		stage float4 BGColor	= float4(1,1,1,1);
		
		stage float	 Size = 1.0;
		stage float  screenPxRange = 16;

		stage float3 Placement = float3(0,0,0);

		stage bool   UseBorder		= false;
		stage float  borderThickness	= 0.2;
		stage float  borderRadius		= 0.5;

		stage float3 SelectedHSV = float3(0.5,1.0,1.0);
		stage float3 SelectedBGHSV = float3(0.5,1.0,1.0);
		stage float  SelectedSize = 2.0;
	}

	// assign VertexID
	stage override void PreTransformPosition()
	{
		AssignVertexID();
	}

	override stage bool enabled()
	{
		uint enabledCount, positionCount, stride;
		enabledBuffer.GetDimensions(enabledCount, stride);
		PositionBuffer.GetDimensions(positionCount, stride);
		return enabledCount == 0 ? true : enabledBuffer[streams.VertexID % positionCount ];
	}


	override stage float3 getQuadPos()
	{

		uint positionCount, stride;
		PositionBuffer.GetDimensions(positionCount, stride);
		return PositionBuffer[streams.VertexID % positionCount ];
	}

	override stage float2 getQuadSize()
	{
		uint positionCount,selectedCount, stride;
		PositionBuffer.GetDimensions(positionCount, stride);
		selectedBuffer.GetDimensions(selectedCount, stride);
		float2 size =  QuadSizeBuffer[streams.VertexID % positionCount] * Size;
		return selectedCount == 0 ? size  : selectedBuffer[streams.VertexID % selectedCount] ? size * SelectedSize : size;

	}

	override stage float4 getQuadColor()
    {
		uint colorCount, selectedCount, stride;
		ColorBuffer.GetDimensions(colorCount, stride);
		selectedBuffer.GetDimensions(selectedCount, stride);
		float4 color = colorCount == 0 ? Color : ColorBuffer[streams.VertexID % colorCount];
		return selectedCount == 0 ? color  : selectedBuffer[streams.VertexID % selectedCount] ? float4(HSVtoRGB(RGBtoHSV(color.xyz)*SelectedHSV),color.w) : color;
    }

	override stage bool useBG()
    {
		return UseBG;
    }

	override stage bool useBorder()
    {
		return UseBorder;
    }

	

	override stage float4 getBGQuadColor()
    {
        uint colorCount, selectedCount, stride;
		BGColorBuffer.GetDimensions(colorCount, stride);
		selectedBuffer.GetDimensions(selectedCount, stride);
		float4 color = colorCount == 0 ? BGColor : BGColorBuffer[streams.VertexID % colorCount];
		return selectedCount == 0 ? color  : selectedBuffer[streams.VertexID % selectedCount] ? float4(HSVtoRGB(RGBtoHSV(color.xyz)*SelectedBGHSV),color.w)  : color;


		
    }

	override stage float4 getID()
    {
        return float4( (float)streams.VertexID, -1, -1, -1);
    }

	override stage float3 getPlacement()
    {
		return Placement;
    }

	override stage float getBorder(float2 uv)
	{

		 return getBorder( uv, QuadSizeBuffer[streams.VertexID] * Size, borderRadius * Size, borderThickness * Size);
	}


	override stage float getCharOpacity(float2 uv)
	{

		 return getCharOpacity( uv, CharPlacementUVBuffer, CharStartEndBuffer[streams.VertexID].x, CharStartEndBuffer[streams.VertexID].y, screenPxRange, FontTexture);
	}
};
